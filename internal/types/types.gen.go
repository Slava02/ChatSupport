// Code generated by my-super-puper-tool. DO NOT EDIT.

package types

import (
	"database/sql/driver"
	"errors"
	"github.com/google/uuid"
)

type TypeSet = interface {
	ChatID | MessageID
}

func Parse[T TypeSet](s string) (T, error) {
	v, err := uuid.Parse(s)
	return T(v), err
}

func MustParse[T TypeSet](s string) T {
	return T(uuid.MustParse(s))
}

// ChatID type

type ChatID uuid.UUID

func NewChatID() ChatID {
	return ChatID(uuid.New())
}

var ChatIDNil = ChatID(uuid.Nil)

func (t ChatID) String() string {
	return uuid.UUID(t).String()
}

func (t ChatID) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t *ChatID) Scan(src any) error {
	return (*uuid.UUID)(t).Scan(src)
}

func (t ChatID) MarshalText() (text []byte, err error) {
	return uuid.UUID(t).MarshalText()
}

func (t *ChatID) UnmarshalText(text []byte) error {
	id, err := uuid.ParseBytes(text)
	if err != nil {
		return err
	}
	*t = ChatID(id)
	return nil
}

func (t ChatID) IsZero() bool {
	return t == ChatIDNil
}

func (t ChatID) Validate() error {
	if t.IsZero() {
		return errors.New("zero ChatID")
	}
	return nil
}

func (t *ChatID) Matches(x interface{}) bool {
	other, ok := x.(ChatID)
	if !ok {
		return false
	}
	return *t == other
}

// MessageID type

type MessageID uuid.UUID

func NewMessageID() MessageID {
	return MessageID(uuid.New())
}

var MessageIDNil = MessageID(uuid.Nil)

func (t MessageID) String() string {
	return uuid.UUID(t).String()
}

func (t MessageID) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t *MessageID) Scan(src any) error {
	return (*uuid.UUID)(t).Scan(src)
}

func (t MessageID) MarshalText() (text []byte, err error) {
	return uuid.UUID(t).MarshalText()
}

func (t *MessageID) UnmarshalText(text []byte) error {
	id, err := uuid.ParseBytes(text)
	if err != nil {
		return err
	}
	*t = MessageID(id)
	return nil
}

func (t MessageID) IsZero() bool {
	return t == MessageIDNil
}

func (t MessageID) Validate() error {
	if t.IsZero() {
		return errors.New("zero MessageID")
	}
	return nil
}

func (t *MessageID) Matches(x interface{}) bool {
	other, ok := x.(MessageID)
	if !ok {
		return false
	}
	return *t == other
}
